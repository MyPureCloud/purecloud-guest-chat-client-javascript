{
  "deletewebchatguestconversationmember": {
    "operationId": "deletewebchatguestconversationmember",
    "functionName": "deleteWebchatGuestConversationMember",
    "signature": "deleteWebchatGuestConversationMember(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Set JWT from the create chat response\n.ApiClient.instance.setJwt(chatInfo.jwt);\n\nlet apiInstance = new .DeleteWebchatGuestConversationMemberRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWebchatGuestConversationMember(conversationId, memberId, callback);\n"
  },
  "getwebchatguestconversationmediarequest": {
    "operationId": "getwebchatguestconversationmediarequest",
    "functionName": "getWebchatGuestConversationMediarequest",
    "signature": "getWebchatGuestConversationMediarequest(conversationId, mediaRequestId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequest",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Set JWT from the create chat response\n.ApiClient.instance.setJwt(chatInfo.jwt);\n\nlet apiInstance = new .GetWebchatGuestConversationMediarequestRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet mediaRequestId = \"mediaRequestId_example\"; // String | mediaRequestId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMediarequest(conversationId, mediaRequestId, callback);\n"
  },
  "getwebchatguestconversationmediarequests": {
    "operationId": "getwebchatguestconversationmediarequests",
    "functionName": "getWebchatGuestConversationMediarequests",
    "signature": "getWebchatGuestConversationMediarequests(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequestEntityList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Set JWT from the create chat response\n.ApiClient.instance.setJwt(chatInfo.jwt);\n\nlet apiInstance = new .GetWebchatGuestConversationMediarequestsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMediarequests(conversationId, callback);\n"
  },
  "getwebchatguestconversationmember": {
    "operationId": "getwebchatguestconversationmember",
    "functionName": "getWebchatGuestConversationMember",
    "signature": "getWebchatGuestConversationMember(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMemberInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Set JWT from the create chat response\n.ApiClient.instance.setJwt(chatInfo.jwt);\n\nlet apiInstance = new .GetWebchatGuestConversationMemberRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMember(conversationId, memberId, callback);\n"
  },
  "getwebchatguestconversationmembers": {
    "operationId": "getwebchatguestconversationmembers",
    "functionName": "getWebchatGuestConversationMembers",
    "signature": "getWebchatGuestConversationMembers(conversationId, pageSize, pageNumber, excludeDisconnectedMembers)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "excludeDisconnectedMembers",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WebChatMemberInfoEntityList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Set JWT from the create chat response\n.ApiClient.instance.setJwt(chatInfo.jwt);\n\nlet apiInstance = new .GetWebchatGuestConversationMembersRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet opts = { \n  'pageSize': 25, // Number | The number of entries to return per page, or omitted for the default.\n  'pageNumber': 1, // Number | The page number to return, or omitted for the first page.\n  'excludeDisconnectedMembers': false // Boolean | If true, the results will not contain members who have a DISCONNECTED state.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMembers(conversationId, opts, callback);\n"
  },
  "getwebchatguestconversationmessage": {
    "operationId": "getwebchatguestconversationmessage",
    "functionName": "getWebchatGuestConversationMessage",
    "signature": "getWebchatGuestConversationMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Set JWT from the create chat response\n.ApiClient.instance.setJwt(chatInfo.jwt);\n\nlet apiInstance = new .GetWebchatGuestConversationMessageRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet messageId = \"messageId_example\"; // String | messageId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMessage(conversationId, messageId, callback);\n"
  },
  "getwebchatguestconversationmessages": {
    "operationId": "getwebchatguestconversationmessages",
    "functionName": "getWebchatGuestConversationMessages",
    "signature": "getWebchatGuestConversationMessages(conversationId, after, before, sortOrder, maxResults)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "maxResults",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "WebChatMessageEntityList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Set JWT from the create chat response\n.ApiClient.instance.setJwt(chatInfo.jwt);\n\nlet apiInstance = new .GetWebchatGuestConversationMessagesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet opts = { \n  'after': \"after_example\", // String | If available, get the messages chronologically after the id of this message\n  'before': \"before_example\", // String | If available, get the messages chronologically before the id of this message\n  'sortOrder': \"ascending\", // String | Sort order\n  'maxResults': 100 // Number | Limit the returned number of messages, up to a maximum of 100\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMessages(conversationId, opts, callback);\n"
  },
  "patchwebchatguestconversationmediarequest": {
    "operationId": "patchwebchatguestconversationmediarequest",
    "functionName": "patchWebchatGuestConversationMediarequest",
    "signature": "patchWebchatGuestConversationMediarequest(conversationId, mediaRequestId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequest",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Set JWT from the create chat response\n.ApiClient.instance.setJwt(chatInfo.jwt);\n\nlet apiInstance = new .PatchWebchatGuestConversationMediarequestRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet mediaRequestId = \"mediaRequestId_example\"; // String | mediaRequestId\nlet body = {}; // Object | Request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWebchatGuestConversationMediarequest(conversationId, mediaRequestId, body, callback);\n"
  },
  "postwebchatguestconversationmembermessages": {
    "operationId": "postwebchatguestconversationmembermessages",
    "functionName": "postWebchatGuestConversationMemberMessages",
    "signature": "postWebchatGuestConversationMemberMessages(conversationId, memberId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Set JWT from the create chat response\n.ApiClient.instance.setJwt(chatInfo.jwt);\n\nlet apiInstance = new .PostWebchatGuestConversationMemberMessagesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\nlet body = {}; // Object | Message\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWebchatGuestConversationMemberMessages(conversationId, memberId, body, callback);\n"
  },
  "postwebchatguestconversationmembertyping": {
    "operationId": "postwebchatguestconversationmembertyping",
    "functionName": "postWebchatGuestConversationMemberTyping",
    "signature": "postWebchatGuestConversationMemberTyping(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatTyping",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Set JWT from the create chat response\n.ApiClient.instance.setJwt(chatInfo.jwt);\n\nlet apiInstance = new .PostWebchatGuestConversationMemberTypingRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWebchatGuestConversationMemberTyping(conversationId, memberId, callback);\n"
  },
  "postwebchatguestconversations": {
    "operationId": "postwebchatguestconversations",
    "functionName": "postWebchatGuestConversations",
    "signature": "postWebchatGuestConversations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateWebChatConversationResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\nlet apiInstance = new .PostWebchatGuestConversationsRequest();\n\nlet body = {}; // Object | CreateConversationRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWebchatGuestConversations(body, callback);\n"
  }
}